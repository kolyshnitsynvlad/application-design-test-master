// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/booking/booking.go

// Package mock_booking is a generated GoMock package.
package mock_booking

import (
	model "applicationDesignTest/internal/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockBookingRepository) CancelReservation(ctx context.Context, reservedRooms model.ReservedRoomsIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", ctx, reservedRooms)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockBookingRepositoryMockRecorder) CancelReservation(ctx, reservedRooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockBookingRepository)(nil).CancelReservation), ctx, reservedRooms)
}

// CreateOrder mocks base method.
func (m *MockBookingRepository) CreateOrder(ctx context.Context, newOrder model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, newOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockBookingRepositoryMockRecorder) CreateOrder(ctx, newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockBookingRepository)(nil).CreateOrder), ctx, newOrder)
}

// RoomReservation mocks base method.
func (m *MockBookingRepository) RoomReservation(ctx context.Context, newOrder model.Order) (model.ReservedRoomsIDs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoomReservation", ctx, newOrder)
	ret0, _ := ret[0].(model.ReservedRoomsIDs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoomReservation indicates an expected call of RoomReservation.
func (mr *MockBookingRepositoryMockRecorder) RoomReservation(ctx, newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoomReservation", reflect.TypeOf((*MockBookingRepository)(nil).RoomReservation), ctx, newOrder)
}
